using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;

namespace PrimatScheduleBot
{
    public static class Querier
    {
        private static readonly string _connection = Data.ConnectionString;

        public static Schedule GetScheduleByDate(string chatId, string date)
        {
            string query = $"SELECT * FROM ScheduleByDate('{chatId}', '{date}')";

            var schedule = Task.Run(() => GetSchedule(query)).Result;

            return schedule;
        }

        public static Schedule GetScheduleByDay(string chatId, string day)
        {
            string query = $"SELECT * FROM ScheduleByDay('{chatId}', '{day}')";

            var schedule = Task.Run(() => GetSchedule(query)).Result;

            return schedule;
        }

        public static int DeleteEvent(Guid Id)
        {
            int result = 0;

            using (var connection = new SqlConnection(_connection))
            {
                string query = "daleteEvent";

                using (var command = new SqlCommand(query, connection))
                {
                    connection.Open();

                    command.CommandType = CommandType.StoredProcedure;

                    var parameter = new SqlParameter
                    {
                        ParameterName = nameof(Id),
                        Value = Id
                    };

                    command.Parameters.Add(parameter);

                    result = command.ExecuteNonQuery();
                }
            }

            return result;
        }

        public static int UpdateEventOnDay(string chatId, Event @event)
        {
            int result = 0;

            using (var connection = new SqlConnection(_connection))
            {
                string query = "updateEventOnDay";

                using (var command = new SqlCommand(query, connection))
                {
                    connection.Open();

                    command.CommandType = CommandType.StoredProcedure;
                    SetParametersForProcedure(command, chatId, @event, nameof(@event.Date));

                    result = command.ExecuteNonQuery();
                }
            }

            return result;
        }

        public static int UpdateEventOnDate(string chatId, Event @event)
        {
            int result = 0;

            using (var connection = new SqlConnection(_connection))
            {
                string query = "updateEventOnDate";

                using var command = new SqlCommand(query, connection);

                connection.Open();

                command.CommandType = CommandType.StoredProcedure;
                SetParametersForProcedure(command, chatId, @event, nameof(@event.Day));

                result = command.ExecuteNonQuery();
            }

            return result;
        }

        public static int InsertEventOnDate(string chatId, Event @event)
        {
            int result = 0;

            using (var connection = new SqlConnection(_connection))
            {
                string query = "insertEventOnDate";

                using (var command = new SqlCommand(query, connection))
                {
                    connection.Open();

                    command.CommandType = CommandType.StoredProcedure;
                    SetParametersForProcedure(command, chatId, @event, nameof(@event.Day));

                    result = command.ExecuteNonQuery();
                }
            }

            return result;
        }

        public static int InsertEventOnDay(string chatId, Event @event)
        {
            int result = -1;

            using (var connection = new SqlConnection(_connection))
            {
                string query = "insertEventOnDay";

                using (var command = new SqlCommand(query, connection))
                {
                    connection.Open();

                    command.CommandType = CommandType.StoredProcedure;
                    SetParametersForProcedure(command, chatId, @event, nameof(@event.Date));

                    result = command.ExecuteNonQuery();
                }
            }

            return result;
        }

        public static void SetParametersForProcedure(SqlCommand command, string chatId, Event @event, string excludedColumn)
        {
            Type pairType = typeof(Event);

            IEnumerable<PropertyInfo> propertyInfo = pairType
                                                        .GetProperties()
                                                        .Where(property => property.Name != excludedColumn);

            command.Parameters.AddWithValue("@ChatId", chatId);

            foreach (var property in propertyInfo)
            {
                string name = property.Name;
                object value = property.GetValue(@event);

                var parameter = new SqlParameter
                {
                    ParameterName = name,
                    Value = value ?? DBNull.Value
                };

                command.Parameters.Add(parameter);
            }
        }

        private static Schedule GetSchedule(string query)
        {
            var schedule = new Schedule();

            using (var connection = new SqlConnection(_connection))
            {
                using (var command = new SqlCommand(query, connection))
                {
                    connection.Open();

                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var pair = new Event();

                            InitEventFromDatabase(reader, pair);
                            schedule.AddEvent(pair);
                        }
                    }
                }
            }

            return schedule;
        }

        private static void InitEventFromDatabase(SqlDataReader reader, Event @event)
        {
            Type pairType = typeof(Event);
            PropertyInfo[] propertyInfo = pairType.GetProperties();

            for (int i = 0; i < reader.FieldCount; i++)
            {
                string columnName = reader.GetName(i);
                var value = reader.GetValue(i);

                PropertyInfo property = pairType.GetProperty(columnName);

                var typedValue = TypeDescriptor
                    .GetConverter(value)
                    .ConvertToString(null, CultureInfo.InvariantCulture, value);

                if (columnName is nameof(@event.Id))
                {
                    var id = Guid.Parse(typedValue);

                    property.SetValue(@event, id);
                }
                else
                {
                    property.SetValue(@event, typedValue);
                }
            }
        }
    }
}
