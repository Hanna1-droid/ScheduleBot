using System;
using System.Data.SqlClient;
using System.Reflection;

namespace PrimatScheduleBot
{
    public static class Querier
    {
        public static Schedule GetScheduleByDate(string chatId, DateTime date)
        {
            string query = $"SELECT * FROM ScheduleByDate('{chatId}', '{date}')";

            return GetSchedule(query);
        }

        public static Schedule GetScheduleByDay(string chatId, string day)
        {
            string query = $"SELECT * FROM ScheduleByDay('{chatId}', '{day}')";

            return GetSchedule(query);
        }

        public static Schedule GetWeeklySchedule(string chatId)
        {
            string query = $"SELECT * FROM WeeklySchedule('{chatId}')";

            return GetSchedule(query);
        }

        public static int DeleteEvent(Guid Id)
        {
            int result = 0;

            using (var connection = new SqlConnection(Data.ConnectionString))
            {
                string query = "daleteEvent";

                using (var command = new SqlCommand(query, connection))
                {
                    connection.Open();

                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    var parameter = new SqlParameter
                    {
                        ParameterName = nameof(Id),
                        Value = Id
                    };

                    command.Parameters.Add(parameter);

                    result = command.ExecuteNonQuery();
                }
            }

            return result;
        }

        public static int UpdateEventOnDay(string chatId, Event @event)
        {
            int result = 0;

            using (var connection = new SqlConnection(Data.ConnectionString))
            {
                string query = "updateEventOnDay";

                using (var command = new SqlCommand(query, connection))
                {
                    connection.Open();

                    command.CommandType = System.Data.CommandType.StoredProcedure;
                    SetParametersForProcedure(command, @event, nameof(@event.Date));

                    result = command.ExecuteNonQuery();
                }
            }

            return result;
        }

        public static int UpdateEventOnDate(string chatId, Event @event)
        {
            int result = 0;

            using (var connection = new SqlConnection(Data.ConnectionString))
            {
                string query = "updateEventOnDate";

                using (var command = new SqlCommand(query, connection))
                {
                    connection.Open();

                    command.CommandType = System.Data.CommandType.StoredProcedure;
                    SetParametersForProcedure(command, @event, nameof(@event.Day));

                    result = command.ExecuteNonQuery();
                }
            }

            return result;
        }

        public static int InsertEventOnDate(string chatId, Event @event)
        {
            int result = 0;

            using (var connection = new SqlConnection(Data.ConnectionString))
            {
                string query = "insertEventOnDate";

                using (var command = new SqlCommand(query, connection))
                {
                    connection.Open();

                    command.CommandType = System.Data.CommandType.StoredProcedure;
                    SetParametersForProcedure(command, @event, nameof(@event.Day));

                    result = command.ExecuteNonQuery();
                }
            }

            return result;
        }

        public static int insertEventOnDay(string chatId, Event @event)
        {
            int result = 0;

            using (var connection = new SqlConnection(Data.ConnectionString))
            {
                string query = "insertEventOnDay";

                using (var command = new SqlCommand(query, connection))
                {
                    connection.Open();

                    command.CommandType = System.Data.CommandType.StoredProcedure;
                    SetParametersForProcedure(command, @event, nameof(@event.Date));

                    result = command.ExecuteNonQuery();
                }
            }

            return result;
        }

        public static void SetParametersForProcedure(SqlCommand command, Event @event, string excludedColumn)
        {
            PropertyInfo[] propertyInfo;
            Type pairType = typeof(Event);

            propertyInfo = pairType.GetProperties();

            foreach (var property in propertyInfo)
            {
                string name = property.Name;

                var parameter = new SqlParameter
                {
                    ParameterName = name,
                    Value = property.GetValue(name)
                };

                command.Parameters.Add(parameter);
            }
        }

        private static Schedule GetSchedule(string query)
        {
            var schedule = new Schedule();

            using (var connection = new SqlConnection(Data.ConnectionString))
            {
                using (var command = new SqlCommand(query, connection))
                {
                    connection.Open();

                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var pair = new Event();

                            InitEventFromDatabase(reader, pair);
                            schedule.AddEvent(pair);
                        }
                    }
                }
            }

            return schedule;
        }

        private static void InitEventFromDatabase(SqlDataReader reader, Event @event)
        {
            PropertyInfo[] propertyInfo;
            Type pairType = typeof(Event); 

            propertyInfo = pairType.GetProperties();

            foreach (var property in propertyInfo)
            {
                int index = reader.GetOrdinal(property.Name);
                string value = Convert.ToString(reader.GetValue(index));

                property.SetValue(@event, value);
            }
        }
    }
}
